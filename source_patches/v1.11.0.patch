diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6123826ba91..43e1e3a0cab 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -135,7 +135,7 @@ endif()
 # For non-supported platforms, turn USE_DISTRIBUTED off by default.
 # It is not tested and likely won't work without additional changes.
 # Enable  NCCL and Gloo
-set(USE_NCCL OFF)
+set(USE_NCCL ON)
 set(USE_SYSTEM_NCCL ON)
 set(USE_GLOO ON)
 set(USE_DISTRIBUTED ON)
@@ -236,7 +236,7 @@ cmake_dependent_option(
     "MLCOMPUTE_FOUND" OFF)
 cmake_dependent_option(
     USE_NCCL "Use NCCL" ON
-    "USE_CUDA OR USE_ROCM;UNIX;NOT APPLE" OFF)
+    "USE_CUDA OR USE_ROCM;UNIX" OFF)
 cmake_dependent_option(USE_RCCL "Use RCCL" ON
     USE_NCCL OFF)
 cmake_dependent_option(
@@ -307,7 +307,7 @@ cmake_dependent_option(
     "USE_MKLDNN" OFF)
 option(USE_DISTRIBUTED "Use distributed" ON)
 cmake_dependent_option(
-    USE_MPI "Use MPI for Caffe2. Only available if USE_DISTRIBUTED is on." ON
+    USE_MPI "Use MPI for Caffe2. Only available if USE_DISTRIBUTED is on." OFF
     "USE_DISTRIBUTED" OFF)
 cmake_dependent_option(
     USE_GLOO "Use Gloo. Only available if USE_DISTRIBUTED is on." ON
diff --git a/aten/src/ATen/cuda/detail/LazyNVRTC.cpp b/aten/src/ATen/cuda/detail/LazyNVRTC.cpp
index 49eb82670c9..eb51bdc2dd0 100644
--- a/aten/src/ATen/cuda/detail/LazyNVRTC.cpp
+++ b/aten/src/ATen/cuda/detail/LazyNVRTC.cpp
@@ -11,6 +11,7 @@ namespace detail {
 namespace _stubs {
 
 at::DynamicLibrary& getCUDALibrary() {
+#if defined(_WIN32)
   static at::DynamicLibrary lib("nvcuda.dll");
 #elif defined(__APPLE__)
   static at::DynamicLibrary lib("libcuda.dylib");
diff --git a/aten/src/ATen/native/ReduceOps.cpp b/aten/src/ATen/native/ReduceOps.cpp
index ad13cc85247..bacac80e9c0 100644
--- a/aten/src/ATen/native/ReduceOps.cpp
+++ b/aten/src/ATen/native/ReduceOps.cpp
@@ -616,8 +616,7 @@ inline typename std::enable_if<!std::is_integral<T>::value, bool>::type isnan_(T
 #else
 template<typename T>
 inline bool isnan_(T x) {
-  //return std::isnan(x);
-  return false;
+  return std::isnan((double)x);
 }
 #endif
 }
diff --git a/aten/src/ATen/native/cpu/AdaptiveMaxPoolKernel.cpp b/aten/src/ATen/native/cpu/AdaptiveMaxPoolKernel.cpp
index 1de76289bf3..d3a4efc75d2 100644
--- a/aten/src/ATen/native/cpu/AdaptiveMaxPoolKernel.cpp
+++ b/aten/src/ATen/native/cpu/AdaptiveMaxPoolKernel.cpp
@@ -55,7 +55,7 @@ void cpu_adaptive_max_pool(
             for (int64_t iw = iw0; iw < iw1; iw ++) {
               int64_t index = ih * input_width + iw;
               scalar_t val = input_ptr[index];
-              if ((val > maxval) || std::isnan(val)) {
+              if ((val > maxval) || std::isnan((double)val)) {
                 maxval = val;
                 maxindex = index;
               }
diff --git a/aten/src/ATen/native/cpu/MaxPoolKernel.cpp b/aten/src/ATen/native/cpu/MaxPoolKernel.cpp
index e81601b987e..984e4382ae6 100644
--- a/aten/src/ATen/native/cpu/MaxPoolKernel.cpp
+++ b/aten/src/ATen/native/cpu/MaxPoolKernel.cpp
@@ -62,7 +62,7 @@ void cpu_max_pool(
         for (int64_t iw = iw0; iw < iw1; iw += dilationW) {
           int64_t index = ih * input_width + iw;
           accscalar_t val = accscalar_t(input_ptr[index]);
-          if ((val > maxval) || std::isnan(val)) {
+          if ((val > maxval) || std::isnan((double)val)) {
             maxval = val;
             maxindex = index;
           }
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 557ab649a4a..3af8a790d5d 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -1328,8 +1328,8 @@ if(USE_NCCL)
         "Not using CUDA/ROCM, so disabling USE_NCCL. Suppress this warning with "
         "-DUSE_NCCL=OFF.")
     caffe2_update_option(USE_NCCL OFF)
-  elseif(NOT CMAKE_SYSTEM_NAME STREQUAL "Linux")
-    message(WARNING "NCCL is currently only supported under Linux.")
+  elseif(NOT (CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME STREQUAL "Darwin"))
+    message(WARNING "NCCL is currently only supported under Linux and macOS.")
     caffe2_update_option(USE_NCCL OFF)
   elseif(USE_CUDA)
     include(${CMAKE_CURRENT_LIST_DIR}/External/nccl.cmake)
diff --git a/torch/distributed/rpc/constants.py b/torch/distributed/rpc/constants.py
index eddf36aa7d7..7e598b8b1b2 100644
--- a/torch/distributed/rpc/constants.py
+++ b/torch/distributed/rpc/constants.py
@@ -6,7 +6,7 @@ from torch._C._distributed_rpc import (
     _DEFAULT_RPC_TIMEOUT_SEC,
     _UNSET_RPC_TIMEOUT,
 )
-DEFAULT_NUM_WORKER_THREADS = 16
+_DEFAULT_NUM_WORKER_THREADS = 16
 
 # For any RpcAgent.
 DEFAULT_RPC_TIMEOUT_SEC: float = _DEFAULT_RPC_TIMEOUT_SEC
